//----------------------------------------------------------------------
//
//	SemWait
//
//	Wait on a semaphore.  As described in Section 6.4 of _OSC_,
//	we decrement the counter and suspend the process if the
//	semaphore's value is less than 0.  To ensure atomicity,
//	interrupts are disabled for the entire operation, but must be
//      turned on before going to sleep.
//
//----------------------------------------------------------------------
int SemWait (Sem *sem) {
	Link	*l;
	int		intrval;

	if (!sem) return SYNC_FAIL;

	intrval = DisableIntrs ();
	dbprintf ('I', "SemWait: Old interrupt value was 0x%x.\n", intrval);
	dbprintf ('s', "SemWait: Proc %d waiting on sem %d, count=%d.\n", GetCurrentPid(), (int)(sem-sems), sem->count);
	if (sem->count <= 0) {
		dbprintf('s', "SemWait: putting process %d to sleep\n", GetCurrentPid());
		if ((l = AQueueAllocLink ((void *)currentPCB)) == NULL) {
			printf("FATAL ERROR: could not allocate link for semaphore queue in SemWait!\n");
			exitsim();
		}
		if (AQueueInsertLast (&sem->waiting, l) != QUEUE_SUCCESS) {
			printf("FATAL ERROR: could not insert new link into semaphore waiting queue in SemWait!\n");
			exitsim();
		}
		ProcessSleep();
	} else {
		dbprintf('s', "SemWait: Proc %d granted permission to continue by sem %d\n", GetCurrentPid(), (int)(sem-sems));
	}
	sem->count--; // Decrement intenal counter
	RestoreIntrs (intrval);
	return SYNC_SUCCESS;
}

int SemHandleWait(sem_t sem) {
	if (sem < 0) return SYNC_FAIL;
	if (sem >= MAX_SEMS) return SYNC_FAIL;
	if (!sems[sem].inuse)    return SYNC_FAIL;
	return SemWait(&sems[sem]);
}

//----------------------------------------------------------------------
//
//	SemSignal
//
//	Signal on a semaphore.  Again, details are in Section 6.4 of
//	_OSC_.
//
//----------------------------------------------------------------------
int SemSignal (Sem *sem) {
	Link *l;
	int	intrs;
	PCB *pcb;

	if (!sem) return SYNC_FAIL;

	intrs = DisableIntrs ();
	dbprintf ('s', "SemSignal: Process %d Signalling on sem %d, count=%d.\n", GetCurrentPid(), (int)(sem-sems), sem->count);
	// Increment internal counter before checking value
	sem->count++;
	if (sem->count > 0) { // check if there is a process to wake up
		if (!AQueueEmpty(&sem->waiting)) { // there is a process to wake up
			l = AQueueFirst(&sem->waiting);
			pcb = (PCB *)AQueueObject(l);
			if (AQueueRemove(&l) != QUEUE_SUCCESS) { 
				printf("FATAL ERROR: could not remove link from semaphore queue in SemSignal!\n");
				exitsim();
			}
			dbprintf ('s', "SemSignal: Waking up PID %d.\n", (int)(GetPidFromAddress(pcb)));
			ProcessWakeup (pcb);
		}
	}
	RestoreIntrs (intrs);
	return SYNC_SUCCESS;
}

int SemHandleSignal(sem_t sem) {
	if (sem < 0) return SYNC_FAIL;
	if (sem >= MAX_SEMS) return SYNC_FAIL;
	if (!sems[sem].inuse)    return SYNC_FAIL;
	return SemSignal(&sems[sem]);
}
